#+TITLE: Introduction to Haskell
#+REVEAL_THEME: night
#+OPTIONS: toc:nil, num:nil, timestamp:nil
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js@4.0.2

* What is Haskell?

** Haskell is a programming language that is
#+ATTR_REVEAL: :frag (roll-in)
- pure
- lazy
- strongly typed
- immutable
- used to build programs by composing functions

** First, Something Familiar
#+begin_src shell
$ cat world.txt
I see trees of green
Red roses too
I see them bloom
For me and for you
And I think to myself
What a wonderful world
#+end_src
#+begin_src bash :results pp
$ cat world.txt | sort | head -n 3
And I think to myself
For me and for you
I see them bloom
#+end_src

#+results:

** In Haskell
#+ATTR_REVEAL: :frag roll-in
#+begin_src haskell
main = readFile "world.txt" >>= putStr . sortTake3

sortTake3 s = unlines (take 3 (sort (lines s)))
#+end_src

* Function Composition

** 
Compose two functions using '.'
#+begin_src
f (g x) = (f . g) x
#+end_src

#+ATTR_REVEAL: :frag roll-in
#+begin_block
So
#+begin_src haskell
sortTake3 s = unlines (take 3 (sort (lines s)))
#+end_src
#+end_block

#+ATTR_REVEAL: :frag roll-in
#+begin_block
becomes
#+begin_src haskell
sortTake3 s = (unlines . take 3 . sort . lines) s
#+end_src
#+end_block

#+ATTR_REVEAL: :frag roll-in
#+begin_block
which can be written as
#+begin_src haskell
sortTake3 = unlines . take 3 . sort . lines
#+end_src
#+end_block

** Some Other Functions
#+BEGIN_SRC haskell
take3Sort    = unlines . sort . take 3 . lines
reverseLines = unlines . reverse       . lines
dropLines n  = unlines . drop n        . lines
#+END_SRC

#+ATTR_REVEAL: :frag roll-in
See a pattern here?

#+ATTR_REVEAL: :frag roll-in


* Higher Order Functions

** 
Let's abstract the pattern.

#+BEGIN_SRC haskell
forLines f = unlines . f . lines
#+END_SRC

#+ATTR_REVEAL: :frag roll-in
#+BEGIN_BLOCK
Then we can write the previous functions as
#+BEGIN_SRC haskell
sortTake3    = forLines (take 3 . sort)
take3Sort    = forLines (sort . take 3)
reverseLines = forLines reverse
dropLines n  = forLines (drop n)
#+END_SRC
#+END_BLOCK

#+ATTR_REVEAL: :frag roll-in
~forLines~ is a higher-order function because it accepts a function as argument.

** Defining Functions
#+ATTR_REVEAL: :frag roll-in
#+BEGIN_BLOCK
Let's define a function that indents a ~String~ by some number of spaces.
#+BEGIN_SRC haskell
indent :: Int -> String -> String
indent n s = replicate n ' ' ++ s
#+END_SRC
#+END_BLOCK

#+ATTR_REVEAL: :frag roll-in
#+BEGIN_BLOCK
But we can't use it with ~forLines~ like this
#+BEGIN_SRC haskell
indentLines :: String -> String
indentLines = forLines indent
#+END_SRC
#+END_BLOCK

#+ATTR_REVEAL: :frag roll-in
Why not?

** 
Let's fix it.  Create another higher-order function that operates on each line.
#+begin_src haskell
forEachLine :: (String -> String) -> String -> String
forEachLine f = unlines . map f . lines
#+end_src

* Haskell Lists

** 
You can create lists
#+begin_src haskell
ints = [2, 3, 4]
strs = ["how ", "you ", "doin?"]
#+end_src

#+ATTR_REVEAL: :frag roll-in
#+BEGIN_BLOCK
And you can
#+BEGIN_SRC haskell
-- map over them
map (+1) ints -- [3, 4, 5]

-- reverse them
reverse ints -- [4, 3, 2]

-- fold them
foldl (+) 0 ints -- 9
foldl (*) 1 ints -- 24
foldl (++) "" strs -- "how you doin?"
#+END_SRC
#+END_BLOCK

#+ATTR_REVEAL: :frag roll-in
And much more!

** Infinite Lists
You can create infinite lists
#+begin_src haskell
xs = [1..] -- [1, 2, 3, 4, ...]
#+end_src

#+ATTR_REVEAL: :frag roll-in
#+BEGIN_BLOCK
You can operate on them normally
#+begin_src haskell
(take 3 . drop 2) xs -- [3, 4, 5]
#+end_src
#+END_BLOCK

#+ATTR_REVEAL: :frag roll-in
(Just don't try to consume it all!)

#+ATTR_REVEAL: :frag roll-in
You can make any recursive data structure infinite (e.g. trees)

** Accessing List Elements
You can
#+begin_src haskell
--  get the head of a list
head strs -- "how"

-- get the "rest" of a list
tail strs -- ["you ", "doin?"]

--  get an element
strs !! 1 -- "you"
#+end_src

#+ATTR_REVEAL: :frag roll-in
But what happens if you try to get the head of an empty list?
#+ATTR_REVEAL: :frag roll-in
#+begin_src haskell
head [] -- boom! exception
#+end_src

* Functions Revisited: Partial/Total Functions

** 
~head~ is known as a _partial_ function: it does not return a value for all inputs.

#+ATTR_REVEAL: :frag roll-in
Conversely, a _total_ function is one the does return a value for all combination of inputs.

#+ATTR_REVEAL: :frag roll-in
It's a best practice to use total functions when possible.

* Maybe

** 
~Maybe~ is Haskell's answer to the null problem.
#+ATTR_REVEAL: :frag roll-in
#+BEGIN_BLOCK
(It's a [[https://en.wikipedia.org/wiki/Tony_Hoare#Apologies_and_retractions][billion dollar mistake]], you know.)
#+END_BLOCK

#+ATTR_REVEAL: :frag roll-in
#+BEGIN_SRC haskell
data Maybe a = Just a
             | Nothing
#+END_SRC

#+ATTR_REVEAL: :frag roll-in
#+BEGIN_BLOCK
~head~ is defined something like
#+begin_src haskell
head :: [a] -> a
head [] = error "empty list"
head (x:_) = x
#+end_src
#+END_BLOCK

#+ATTR_REVEAL: :frag roll-in
#+BEGIN_BLOCK
A version using ~Maybe~ would look something like
#+begin_src haskell
headMaybe :: [a] -> Maybe a
head [] = Nothing
head (x:_) = Just x
#+end_src
#+END_BLOCK

** Haskell is Pure
#+ATTR_REVEAL: :frag (roll-in)
- This means that functions _always_ return the same output for a given set of inputs, and
- they have no side effects

** Haskell is lazy
#+ATTR_REVEAL: :frag (roll-in)
- data is only created as it is needed

*** TODO perhaps show definition of Fibonacci sequence as in [[https://www.youtube.com/watch?v=apBWkBDVlow][this video]].

#+ATTR_REVEAL: :frag roll-in
#+begin_src haskell :results pp
-- an infinite list
xs = [1..]

-- take the first 10
take 10 xs
#+end_src

#+results: 
| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 |

* Why Haskell is Cool
- A new way to think about programming
- expressive, concise and clear
- beautiful
