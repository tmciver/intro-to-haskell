#+TITLE: Introduction to Haskell
#+REVEAL_THEME: night
#+OPTIONS: toc:nil, num:nil, timestamp:nil
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js@4.0.2

* What is Haskell?

** Haskell is a programming language that
#+ATTR_REVEAL: :frag (roll-in)
- is pure
- is lazy
- is strongly typed
- has immutable data structures
- is used to build programs by composing functions
  - show how it's similar to unix pipes as in [[https://www.youtube.com/watch?v=b9FagOVqxmI][this video]].

** First, Something Familiar
#+begin_src shell
$ cat world.txt
I see trees of green
Red roses too
I see them bloom
For me and for you
And I think to myself
What a wonderful world
#+end_src
#+begin_src bash :results pp
$ cat world.txt | sort | head -n 3
And I think to myself
For me and for you
I see them bloom
#+end_src

#+results:

** In Haskell
#+ATTR_REVEAL: :frag roll-in
#+begin_src haskell
main = readFile "world.txt" >>= putStr . sortTake3

sortTake3 s = unlines (take 3 (sort (lines s)))
#+end_src

** Function Composition
Compose two functions using '.'
#+begin_src
f (g x) = (f . g) x
#+end_src

#+ATTR_REVEAL: :frag roll-in
#+begin_block
So
#+begin_src haskell
sortTake3 s = unlines (take 3 (sort (lines s)))
#+end_src
#+end_block

#+ATTR_REVEAL: :frag roll-in
#+begin_block
becomes
#+begin_src haskell
sortTake3 s = (unlines . take 3 . sort . lines) s
#+end_src
#+end_block

#+ATTR_REVEAL: :frag roll-in
#+begin_block
which becomes
#+begin_src haskell
sortTake3 = unlines . take 3 . sort . lines
#+end_src
#+end_block

** Some Other Functions
#+BEGIN_SRC haskell
take3Sort    = unlines . sort . take 3 . lines
reverseLines = unlines . reverse       . lines
dropLines n  = unlines . drop n        . lines
#+END_SRC

#+ATTR_REVEAL: :frag roll-in
See a pattern here?

** Let's Abstract It!
#+BEGIN_SRC haskell
forLines f = (unlines . f . lines)
#+END_SRC

#+ATTR_REVEAL: :frag roll-in
#+BEGIN_BLOCK
Then we can write the previous functions as
#+BEGIN_SRC haskell
sortTake3    = forLines (take 3 . sort)
take3Sort    = forLines (sort . take 3)
reverseLines = forLines reverse
dropLines n  = forLines (drop n)
#+END_SRC
#+END_BLOCK

#+ATTR_REVEAL: :frag roll-in
~forLines~ is a higher-order function because it accepts a function as argument.

** Haskell is Pure
#+ATTR_REVEAL: :frag (roll-in)
- This means that functions _always_ return the same output for a given set of inputs, and
- they have no side effects

** Haskell is lazy
#+ATTR_REVEAL: :frag (roll-in)
- data is only created as it is needed

*** TODO perhaps show definition of Fibonacci sequence as in [[https://www.youtube.com/watch?v=apBWkBDVlow][this video]].

#+ATTR_REVEAL: :frag roll-in
#+begin_src haskell :results pp
-- an infinite list
xs = [1..]

-- take the first 10
take 10 xs
#+end_src

#+results: 
| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 |

* Why Haskell is Cool
- A new way to think about programming
- expressive, concise and clear
- beautiful
